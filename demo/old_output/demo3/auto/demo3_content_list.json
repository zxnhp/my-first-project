[
    {
        "type": "text",
        "text": "TABLEFORMER: Robust Transformer Modeling for Table-Text Encoding ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Jingfeng Yang Aditya Gupta† Shyam Upadhyay† Luheng He Rahul Goel† Shachi Paul † ?Georgia Institute of Technology †Google Assistant jingfengyangpku@gmail.com tableformer@google.com ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Abstract ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Understanding tables is an important aspect of natural language understanding. Existing models for table understanding require linearization of the table structure, where row or column order is encoded as an unwanted bias. Such spurious biases make the model vulnerable to row and column order perturbations. Additionally, prior work has not thoroughly modeled the table structures or table-text alignments, hindering the table-text understanding ability. In this work, we propose a robust and structurally aware table-text encoding architecture TABLEFORMER, where tabular structural biases are incorporated completely through learnable attention biases. TABLEFORMER is (1) strictly invariant to row and column orders, and, (2) could understand tables better due to its tabular inductive biases. Our evaluations showed that TABLEFORMER outperforms strong baselines in all settings on SQA, WTQ and TABFACT table reasoning datasets, and achieves state-of-the-art performance on SQA, especially when facing answer-invariant row and column order perturbations $6 \\%$ improvement over the best baseline), because previous SOTA models’ performance drops by $4 \\% - 6 \\%$ when facing such perturbations while TABLEFORMER is not affected.1 ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "1 Introduction ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Recently, semi-structured data (e.g. variable length tables without a fixed data schema) has attracted more attention because of its ubiquitous presence on the web. On a wide range of various table reasoning tasks, Transformer based architecture along with pretraining has shown to perform well (Eisenschlos et al., 2021; Liu et al., 2021). ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "In a nutshell, prior work used the Transformer architecture in a BERT like fashion by serializing ",
        "page_idx": 0
    },
    {
        "type": "table",
        "img_path": "images/037fbf170cfdc9c615127f2cb80a5456e20dda5fdf5e890975db3b21876f0f23.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>Title</td><td>Length</td></tr><tr><td>Screwed Up Ghetto Queen</td><td>5:02 5:00</td></tr></table></body></html>",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Question: Of all song lengths, which one is the longest?   \nGold Answer: 5:02   \nTAPAS: 5:00   \nTAPAS after row order perturbation: 5:02   \nTABLEFORMER: 5:02 ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "(a) TAPAS predicts incorrect answer based on the original table, while it gives the correct answer if the first row is moved to the end of the table. ",
        "page_idx": 0
    },
    {
        "type": "table",
        "img_path": "images/68b75e08d891d01469ce0a00d38a3f22e5d7ec9ba9cae0c72c809c1afc2eeab5.jpg",
        "table_caption": [],
        "table_footnote": [
            "Question: Which nation received 2 silver medals? Gold Answer: Spain, Ukraine TAPAS: Spain TABLEFORMER: Spain, Ukraine TABLEFORMER w/o a proposed structural bias: Spain "
        ],
        "table_body": "<html><body><table><tr><td>Nation</td><td>Gold</td><td>Silver</td><td>Bronze</td></tr><tr><td>Great Britain</td><td>2</td><td>1</td><td>2</td></tr><tr><td>Spain</td><td>1</td><td>2</td><td>0</td></tr><tr><td>Ukraine</td><td>0</td><td>2</td><td>0</td></tr></table></body></html>",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "(b) TAPAS gives incomplete answer due to its limited cell grounding ability. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Figure 1: Examples showing the limitations of existing models (a) vulnerable to perturbations, and (b) lacking structural biases. In contrast, our proposed TABLEFORMER predicts correct answers for both questions. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "tables or rows into word sequences (Yu et al., 2020; Liu et al., 2021), where original position ids are used as positional information. Due to the usage of row/column ids and global position ids, prior strategies to linearize table structures introduced spurious row and column order biases (Herzig et al., 2020; Eisenschlos et al., 2020, 2021; Zhang et al., 2020; Yin et al., 2020). Therefore, those models are vulnerable to row or column order perturbations. But, ideally, the model should make consistent predictions regardless of the row or column ordering for all practical purposes. For instance, in Figure 1, the predicted answer of TAPAS model (Herzig et al., 2020) for Question (a) “Of all song lengths, which one is the longest?” based on the original table is $5 . 0 0 ^ { \\prime }$ , which is incorrect. However, if the first row is adjusted to the end of the table during inference, the model gives the correct length $\" 5 . 0 2 \"$ as answer. This probing example shows that the model being aware of row order information is inclined to select length values to the end of the table due to spurious training data bias. In our experiments on the SQA dataset, TAPAS models exhibit a $4 \\%$ - $6 \\%$ (Section 5.2) absolute performance drop when facing such answer-invariant perturbations. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Besides, most prior work (Chen et al., 2020; Yin et al., 2020) did not incorporate enough structural biases to models to address the limitation of sequential Transformer architecture, while others inductive biases which are either too strict (Zhang et al., 2020; Eisenschlos et al., 2021) or computationally expensive (Yin et al., 2020). ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "To this end, we propose TABLEFORMER, a Transformer architecture that is robust to row and column order perturbations, by incorporating structural biases more naturally. TABLEFORMER relies on 13 types of task-independent table $$ text attention biases that respect the table structure and table-text relations. For Question (a) in Figure 1, TABLEFORMER could predict the correct answer regardless of perturbation, because the model could identify the same row information with our “same row” bias, avoiding spurious biases introduced by row and global positional embeddings. For Question (b), TAPAS predicted only partially correct answer, while TABLEFORMER could correctly predict “Spain, Ukraine” as answers. That’s because our “cell to sentence” bias could help table cells ground to the paired sentence. Detailed attention bias types are discussed in Section 5.2. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Experiments on 3 table reasoning datasets show that TABLEFORMER consistently outperforms original TAPAS in all pretraining and intermediate pretraining settings with fewer parameters. Also, TABLEFORMER’s invariance to row and column perturbations, leads to even larger improvement over those strong baselines when tested on perturbations. Our contributions are as follows: ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "• We identified the limitation of current tabletext encoding models when facing row or column perturbation. • We propose TABLEFORMER, which is guaranteed to be invariant to row and column order perturbations, unlike current models. • TABLEFORMER encodes table-text structures better, leading to SoTA performance on SQA dataset, and ablation studies show the effectiveness of the introduced inductive biases. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "2 Preliminaries: TAPAS for Table Encoding ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "In this section, we discuss TAPAS which serves as the backbone of the recent state-of-the-art tabletext encoding architectures. TAPAS (Herzig et al., 2020) uses Transformer architecture in a BERT like fashion to pretrain and finetune on tabular data for table-text understanding tasks. This is achieved by using linearized table and texts for masked language model pre-training. In the finetuning stage, texts in the linearized table and text pairs are queries or statements in table QA or tabletext entailment tasks, respectively. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Specifically, TAPAS uses the tokenized and flattened text and table as input, separated by [SEP] token, and prefixed by [CLS]. Besides token, segment, and global positional embedding introduced in BERT (Devlin et al., 2019), it also uses rank embedding for better numerical understanding. Moreover, it uses column and row embedding to encode table structures. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Concretely, for any table-text linearized sequence $\\textit { S } = \\ \\{ v _ { 1 } , v _ { 2 } , \\cdot \\cdot \\cdot , v _ { n } \\}$ , where $n$ is the length of table-text sequence, the input to TAPAS is summation of embedding of the following: ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "token ids $\\left( W \\right) = \\{ w _ { v _ { 1 } } , w _ { v _ { 2 } } , \\cdot \\cdot \\cdot , w _ { v _ { n } } \\}$   \npositional ids $( B ) = \\{ b _ { 1 } , b _ { 2 } , \\cdot \\cdot \\cdot , b _ { n } \\}$   \nsegment ids $( G ) = \\{ g _ { s e g _ { 1 } } , g _ { s e g _ { 2 } } , \\cdot \\cdot \\cdot , g _ { s e g _ { n } } \\}$   \ncolumn ids $( C ) = \\{ c _ { c o l _ { 1 } } , c _ { c o l _ { 2 } } , \\cdot \\cdot \\cdot , c _ { c o l _ { n } } \\}$ row ids $( R ) = \\{ r _ { r o w _ { 1 } } , r _ { r o w _ { 2 } } , \\cdot \\cdot \\cdot , r _ { r o w _ { n } } \\}$ rank ids $( Z ) = \\{ z _ { r a n k _ { 1 } } , z _ { r a n k _ { 2 } } , \\cdot \\cdot \\cdot , z _ { r a n k _ { n } } \\}$ ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "where $s e g _ { i }$ , $c o l _ { i }$ , $r o w _ { i }$ , $r a n k _ { i }$ correspond to the segment, column, row, and rank id for the ith token, respectively. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "As for the model, TAPAS uses BERT’s selfattention architecture (Vaswani et al., 2017) offthe-shelf. Each Transformer layer includes a multihead self-attention sub-layer, where each token attends to all the tokens. Let the layer input $H = [ h _ { 1 } , h _ { 2 } , \\cdot \\cdot \\cdot , h _ { n } ] ^ { \\top } \\in \\mathbb { R } ^ { n \\times d }$ corresponding to $S$ , where $d$ is the hidden dimension, and $h _ { i } \\in \\mathbb { R } ^ { d \\times 1 }$ is the hidden representation at position $i$ . For a single-head self-attention sub-layer, the input $H$ is projected by three matrices $\\bar { W } ^ { Q } \\in \\mathbb { R } ^ { d \\times \\bar { d } _ { K } }$ $W ^ { K } \\in \\mathbb { R } ^ { d \\times d _ { K } }$ , and $W ^ { V } \\in \\mathbb { R } ^ { d \\times d _ { V } }$ to the corresponding representations $Q , K$ , and $V$ : ",
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/58bb1ebf3fbc6ffb5662191c935b856685d97e47aa8e8c8f430e256fb848ff84.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "image",
        "img_path": "images/2ed10b969cc6c385c5513ed46a76724c977983011a132e754b950785040ff0e7.jpg",
        "img_caption": [
            "Figure 2: TABLEFORMER input and attention biases in the self attention module. This example corresponds to table (a) in Figure 1 and its paired question “query”. Different colors in the attention bias matrix denote different types of task independent biases derived based on the table structure and the associated text. "
        ],
        "img_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "equation",
        "img_path": "images/577d6d1141f8ac57aefc0a80f290be4e2c30a4bb5805fafb4ca779412a422fc7.jpg",
        "text": "$$\nQ = H W ^ { Q } , \\quad V = H W ^ { V } , \\quad K = H W ^ { K }\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Then, the output of this single-head selfattention sub-layer is calculated as: ",
        "page_idx": 2
    },
    {
        "type": "equation",
        "img_path": "images/bbdce1c87623d73b40895aa4589a3b125b1e84133298d1614501a19485b38fd5.jpg",
        "text": "$$\n\\mathrm { A t t n } ( H ) = \\mathrm { s o f t m a x } ( \\frac { Q K ^ { \\top } } { \\sqrt { d _ { K } } } ) V\n$$",
        "text_format": "latex",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3 TABLEFORMER: Robust Structural Table Encoding ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "As shown in Figure 2, TABLEFORMER encodes the general table structure along with the associated text by introducing task-independent relative attention biases for table-text encoding to facilitate the following: (a) structural inductive bias for better table understanding and table-text alignment, (b) robustness to table row/column perturbation. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Input of TABLEFORMER. TABLEFORMER uses the same token embeddings $W$ , segment embeddings $G$ , and rank embeddings $Z$ as TAPAS. However, we make 2 major modifications: ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "1) No row or column ids. We do not use row embeddings $R$ or column embeddings $C$ to avoid any potential spurious row and column order biases. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "2) Per cell positional ids. To further remove any inter-cell order information, global positional embeddings $B$ are replaced by per cell positional embeddings $P = \\{ p _ { p o s _ { 1 } } , p _ { p o s _ { 2 } } , \\cdot \\cdot \\cdot , p _ { p o s _ { n } } \\}$ , where we follow Eisenschlos et al. (2021) to reset the index of positional embeddings at the beginning of each cell, and $p o s _ { i }$ correspond to the per cell positional id for the ith token. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Positional Encoding in TABLEFORMER. Note that the Transformer model either needs to specify different positions in the input (i.e. absolute positional encoding of Vaswani et al. (2017)) or encode the positional dependency in the layers (i.e. relative positional encoding of Shaw et al. (2018)). ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "TABLEFORMER does not consume any sort of column and row order information in the input. The main intuition is that, for cells in the table, the only useful positional information is whether two cells are in the same row or column and the column header of each cell, instead of the absolute order of the row and column containing them. Thus, inspired by relative positional encoding (Shaw et al., 2018) and graph encoding (Ying et al., 2021), we capture this with a same column/row relation as one kind of relative position between two linearized tokens. Similarly, we uses 12 such table-text structure relevant relations (including same cell, cell to header and so on) and one extra type representing all other relations not explicitly defined. All of them are introduced in the form of learnable attention bias scalars. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Formally, we consider a function $\\phi ( v _ { i } , v _ { j } ) : V \\times$ $V  \\mathbb { N }$ , which measures the relation between $v _ { i }$ and $v _ { j }$ in the sequence $( v _ { i } , v _ { j } \\in S )$ . The function $\\phi$ can be defined by any relations between the tokens in the table-text pair. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Attention Biases in TABLEFORMER. In our work, $\\phi ( v _ { i } , v _ { j } )$ is chosen from 13 bias types, corresponding to 13 table-text structural biases. The attention biases are applicable to any table-text pair and can be used for any downstream task: ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "• “same row” identifies the same row information without ordered row id embedding or global positional embedding, which help the model to be invariant to row perturbations, “same column”, “header to column cell”, and   \n“cell to column header” incorporates the same column information without ordered column id embedding,   \n• “cell to column header” makes each cell aware of its column header without repeated column header as features,   \n• “header to sentence” and “cell to sentence” help column grounding and cell grounding of the paired text,   \n“sentence to header”, “sentence to cell”, and   \n“sentence to sentence” helps to understand the sentence with the table as context,   \n• “header to same header” and “header to other header” for better understanding of table schema, and “same cell bias” for cell content understanding. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Note that, each cell can still attend to other cells in the different columns or rows through “others” instead of masking them out strictly. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "We assign each bias type a learnable scalar, which will serve as a bias term in the self-attention module. Specifically, each self-attention head in each layer have a set of learnable scalars $\\{ b _ { 1 } , b _ { 2 } , \\cdots , b _ { 1 3 } \\}$ corresponding to all types of introduced biases. For one head in one self-attention sub-layer of TABLEFORMER, Equation 2 in the Transformer is replaced by: ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "equation",
        "img_path": "images/0dbac9326141a97651f496ff85fc6ddfce7262a659f374b8da1f8eea2859514e.jpg",
        "text": "$$\n\\bar { A } = \\frac { Q K ^ { \\top } } { \\sqrt { d _ { K } } } , \\quad A = \\bar { A } + \\hat { A }\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "equation",
        "img_path": "images/e23085cd35478bde134b54a8e7da4f03575be99301be92a7285d31ef183d09eb.jpg",
        "text": "$$\n\\operatorname { A t t n } ( H ) = \\operatorname { s o f t m a x } ( A ) V\n$$",
        "text_format": "latex",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "where $\\bar { A }$ is a matrix capturing the similarity between queries and keys, $\\hat { A }$ is the Attention Bias Matrix, and Aˆi,j = bφ(vi,vj ). ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Relation between TABLEFORMER and ETC. ETC (Ainslie et al., 2020) uses vectors to represent relative position labels, although not directly applied to table-text pairs due to its large computational overhead (Eisenschlos et al., 2021). TABLEFORMER differs from ETC in the following aspects (1) ETC uses relative positional embeddings while TABLEFORMER uses attention bias scalars. In practice, we observed that using relative positional embeddings increases training time by more than $7 \\mathbf { x }$ , (2) ETC uses global memory and local attention, while TABLEFORMER uses pairwise attention without any global memory overhead, (3) ETC uses local sparse attention with masking, limiting its ability to attend to all tokens, (4) ETC did not explore table-text attention bias types exhaustively. Another table encoding model MATE (Eisenschlos et al., 2021) is vulnerable to row and column perturbations, and shares limitation (3) and (4). ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "4 Experimental Setup ",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "4.1 Datasets and Evaluation ",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "We use the following datasets in our experiments. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Table Question Answering. For the table QA task, we conducted experiments on WikiTableQuestions (WTQ) (Pasupat and Liang, 2015) and Sequential QA (SQA) (Iyyer et al., 2017) datasets. WTQ was crowd-sourced based on complex questions on Wikipedia tables. SQA is composed of 6, 066 question sequences (2.9 question per sequence on average), constructed by decomposing a subset of highly compositional WTQ questions. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Table-Text Entailment. For the table-text entailment task, we used TABFACT dataset (Chen et al., 2020), where the tables were extracted from Wikipedia and the sentences were written by crowd workers. Among total 118, 000 sentences, each one is a positive (entailed) or negative sentence. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Perturbation Evaluation Set. For SQA and TABFACT, we also created new test sets to measure models’ robustness to answer-invariant row and column perturbations during inference. Specifically, row and column orders are randomly perturbed for all tables in the standard test sets.2 ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Pre-training All the models are first tuned on the Wikipidia text-table pretraining dataset (Herzig et al., 2020), optionally tuned on synthetic dataset at an intermediate stage (“inter”) (Eisenschlos et al., 2020), and finally fine-tuned on the target dataset. To get better performance on WTQ, we follow Herzig et al. (2020) to further pretrain on SQA dataset after the intermediate pretraining stage in the “inter-sqa” setting. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Evaluation For SQA, we report the cell selection accuracy for all questions (ALL) using the official evaluation script, cell selection accuracy for all sequences (SEQ), and the denotation accuracy for all questions $( \\mathrm { A L L } \\mathrm { L } _ { \\mathrm { d } } )$ . To evaluate the models’ robustness in the instance level after perturbations, we also report a lower bound of example prediction variation percentage: ",
        "page_idx": 4
    },
    {
        "type": "equation",
        "img_path": "images/feedf69f8c351736257facc175d80f584dfa2f0f34098e25caac4e8db2c024f3.jpg",
        "text": "$$\nV P = { \\frac { \\left( { \\mathrm { t } } 2 { \\mathrm { f } } + { \\mathrm { f } } 2 { \\mathrm { t } } \\right) } { \\left( { \\mathrm { t } } 2 { \\mathrm { t } } + { \\mathrm { t } } 2 { \\mathrm { f } } + { \\mathrm { f } } 2 { \\mathrm { t } } + { \\mathrm { f } } 2 { \\mathrm { f } } \\right) } }\n$$",
        "text_format": "latex",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "where t2t, t2f, f2t, and f2f represents how many example predictions turning from correct to correct, from correct to incorrect, from incorrect to correct and from incorrect to incorrect, respectively, after perturbation. We report denotation accuracy on WTQ and binary classification accuracy on TABFACT respectively. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "4.2 Baselines ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "We use TAPASBASE and TAPASLARGE as baselines, where Transformer architectures are exactly same as BERTBASE and BERTLARGE (Devlin et al., 2019), and parameters are initialized from BERTBASE and BERTLARGE respectively. Correspondingly, we have our TABLEFORMERBASE and TABLEFORMERLARGE, where attention bias scalars are initialized to zero, and all other parameters are initialized from BERTBASE and BERTLARGE. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "4.3 Perturbing Tables as Augmented Data ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Could we alleviate the spurious ordering biases by data augmentation alone, without making any modeling changes? To answer this, we train another set of models by augmenting the training data for TAPAS through random row and column order perturbations.3 ",
        "page_idx": 4
    },
    {
        "type": "table",
        "img_path": "images/f6ffe116c677e53881815d90a1f52acba8e2db768a1868c3fc11cdac0bef19a3.jpg",
        "table_caption": [
            "Table 1: Results on SQA test set before and after perturbation during inference (median of 5 runs). ALL is cell selection accuracy, SEQ is cell selection accuracy for all question sequences, $\\mathrm { { A L L } _ { d } }$ is denotation accuracy for all questions (reported to compare with Liu et al. (2021)). $V P$ is model prediction variation percentage after perturbation. Missing values are those not reported in the original paper. "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td colspan=\"2\">Before Perturb</td><td colspan=\"2\">After Perturb</td></tr><tr><td></td><td>ALL SEQ</td><td>ALLd</td><td>ALL</td><td>VP</td></tr><tr><td>Herzig et al. (2020)</td><td>67.2</td><td>40.4</td><td>-</td><td>-</td></tr><tr><td>Eisenschlos et al. (2020)</td><td>71.0</td><td>44.8 -</td><td>一</td><td>一</td></tr><tr><td>Eisenschlos et al. (2021)</td><td>71.7</td><td>46.1</td><td>-</td><td></td></tr><tr><td>Liu et al. (2021)</td><td>-</td><td>- 74.5</td><td>-</td><td>-</td></tr><tr><td>TAPASBASE</td><td>61.1</td><td>31.3</td><td>57.4</td><td>14.0%</td></tr><tr><td>TABLEFORMERBASE</td><td>66.7</td><td>39.7</td><td>66.7</td><td>0.2%</td></tr><tr><td>TAPASLARGE</td><td>66.8</td><td>39.9</td><td>60.5</td><td>15.1%</td></tr><tr><td>TABLEFORMERLARGE</td><td>70.3</td><td>44.8</td><td>70.3</td><td>0.1%</td></tr><tr><td>TAPASBAsE inter</td><td>67.5</td><td>38.8</td><td>61.0</td><td>14.3%</td></tr><tr><td>TABLEFORMERBAsE inter</td><td>69.4</td><td>43.5</td><td>69.3</td><td>0.1%</td></tr><tr><td>TAPASLARGE inter</td><td>70.6</td><td>43.9</td><td>66.1</td><td>10.8%</td></tr><tr><td>TABLEFORMERLARGE inter</td><td>72.4</td><td>47.5</td><td>75.9 72.3</td><td>0.1%</td></tr></table></body></html>",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "For each table in the training set, we randomly shuffle all rows and columns (including corresponding column headers), creating a new table with the same content but different orders of rows and columns. Multiple perturbed versions of the same table were created by repeating this process $\\{ 1 , 2 , 4 , 8 , 1 6 \\}$ times with different random seeds. For table QA tasks, selected cell positions are also adjusted as final answers according to the perturbed table. The perturbed table-text pairs are then used to augment the data used to train the model. During training, the model takes data created by one specific random seed in one epoch in a cyclic manner. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "5 Experiments and Results ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Besides standard testing results to compare TABLEFORMER and baselines, we also answer the following questions through experiments: ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "• How robust are existing (near) state-of-theart table-text encoding models to semantic preserving perturbations in the input? • How does TABLEFORMER compare with existing table-text encoding models when tested on similar perturbations, both in terms of performance and robustness? ",
        "page_idx": 4
    },
    {
        "type": "table",
        "img_path": "images/16e5d8acaad8cfad937d06369195e79d94a973f975e07d86e9940eb63888015a.jpg",
        "table_caption": [
            "Table 2: Binary classification accuracy on TABFACT development and 4 splits of test set, as well as performance on test sets with our perturbation evaluation. Median of 5 independent runs are reported. Missing values are those not reported in the original paper. "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td colspan=\"5\">Before Perturb</td><td colspan=\"4\">After Perturb</td></tr><tr><td></td><td>dev</td><td>test</td><td>testsimple</td><td>testcomplex</td><td>testsmall</td><td>test</td><td>testsimple</td><td>testcomplex</td><td>testsmalll</td></tr><tr><td>Eisenschlos et al. (2020) Eisenschlos et al. (2021)</td><td>81.0</td><td>81.0</td><td>92.3</td><td>75.6</td><td>83.9</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>TAPASBASE</td><td>- 72.8</td><td>81.4 72.3</td><td>- 84.8</td><td>- 66.2</td><td>- 74.4</td><td>- 71.2</td><td>- 83.4</td><td>- 65.2</td><td>- 72.5</td></tr><tr><td>TABLEFORMERBASE</td><td>75.1</td><td>75.0</td><td>88.2</td><td>68.5</td><td>77.1</td><td>75.0</td><td>88.2</td><td>68.5</td><td>77.1</td></tr><tr><td>TABLEFORMERLARGE TAPASLARGE</td><td>74.7</td><td>74.5</td><td>86.6</td><td>68.6</td><td>76.8</td><td>73.7</td><td>86.0</td><td>67.7</td><td>76.1 80.3</td></tr><tr><td></td><td>77.2</td><td>77.0</td><td>90.2</td><td>70.5</td><td>80.3</td><td>77.0</td><td>90.2</td><td>70.5</td><td></td></tr><tr><td>TAPASBAsE inter</td><td>78.4</td><td>77.9</td><td>90.1</td><td>71.9</td><td>80.5</td><td>76.8</td><td>89.5</td><td>70.5</td><td>79.7</td></tr><tr><td>TABLEFoRMERBAsE inter</td><td>79.7</td><td>79.2</td><td>91.6</td><td>73.1</td><td>81.7</td><td>79.2</td><td>91.6</td><td>73.1</td><td>81.7</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>TAPASLARGE inter</td><td>80.6</td><td>80.6</td><td>92.0</td><td>74.9</td><td>83.1</td><td>79.2</td><td>91.7</td><td>73.0</td><td>83.0</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>TABLEFORMERLARGE inter</td><td>82.0</td><td>81.6</td><td>93.3</td><td>75.9</td><td>84.6</td><td>81.6</td><td>93.3</td><td>75.9</td><td>84.6</td></tr></table></body></html>",
        "page_idx": 5
    },
    {
        "type": "table",
        "img_path": "images/67bf78e411c94e48a6acee5814b2495c7f6fb40b4b51786908eac3cc69485141.jpg",
        "table_caption": [
            "Table 3: Denotation accuracy on WTQ development and test set. Median of 5 independent runs are reported. "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>Model</td><td>dev</td><td>test</td></tr><tr><td>Herzig et al. (2020)</td><td>-</td><td>48.8</td></tr><tr><td>Eisenschlos et al. (2021)</td><td>-</td><td>51.5</td></tr><tr><td>TAPASBASE</td><td>23.6</td><td>24.1</td></tr><tr><td>TABLEFORMERBASE</td><td>34.4</td><td>34.8</td></tr><tr><td>TAPASLARGE</td><td>40.8</td><td>41.7</td></tr><tr><td>TABLEFORMERLARGE</td><td>42.5</td><td>43.9</td></tr><tr><td>TAPASBAsE inter-sqa</td><td>44.8</td><td>45.1</td></tr><tr><td>TABLEFORMERBAsE inter-sqa</td><td>46.7</td><td>46.5</td></tr><tr><td>TAPASLARGE inter-sqa</td><td>49.9</td><td>50.4</td></tr><tr><td>TABLEFoRMERLARGE inter-sqa</td><td>51.3</td><td>52.6</td></tr></table></body></html>",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "• Can we use perturbation based data augmentation to achieve robustness at test time? ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "• Which attention biases in TABLEFORMER contribute the most to performance? ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "5.1 Main Results ",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Table 1, 2, and 3 shows TABLEFORMER performance on SQA, TABFACT, and WTQ, respectively. As can be seen, TABLEFORMER outperforms corresponding TAPAS baseline models in all settings on SQA and WTQ datasets, which shows the general effectiveness of TABLEFORMER’s structural biases in Table QA datasets. Specifically, TABLEFORMERLARGE combined with intermediate pretraining achieves new state-of-the-art performance on SQA dataset. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Similarly, Table 2 shows that TABLEFORMER also outperforms TAPAS baseline models in all settings, which shows the effectiveness of TABLEFORMER in the table entailment task. Note that, Liu et al. (2021) is not comparable to our results, because they used different pretraining data, different pretraining objectives, and BART NLG model instead of BERT NLU model. But TABLEFORMER attention bias is compatible with BART model. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "5.2 Perturbation Results ",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "One of our major contributions is to systematically evaluate models’ performance when facing row and column order perturbation in the testing stage. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Ideally, model predictions should be consistent on table QA and entailment tasks when facing such perturbation, because the table semantics remains the same after perturbation. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "However, in Table 1 and 2, we can see that in our perturbed test set, performance of all TAPAS models drops significantly in both tasks. TAPAS models drops by at least $3 . 7 \\%$ and up to $6 . 5 \\%$ in all settings on SQA dataset in terms of ALL accuracy, while our TABLEFORMER being strictly invariant to such row and column order perturbation leads to no drop in performance.4 Thus, in the perturbation setting, TABLEFORMER outperforms all TAPAS baselines even more significantly, with at least $6 . 2 \\%$ and $2 . 4 \\%$ improvements on SQA and TABFACT dataset, respectively. In the instance level, we can see that, with TAPAS, there are many example predictions changed due to high $V P$ , while there is nearly no example predictions changed with TABLEFORMER (around zero $V P$ ). ",
        "page_idx": 5
    },
    {
        "type": "table",
        "img_path": "images/4c8495822a2f564f99e4f7bfadf8af5b44ab848d3136d4e2b5ff7580102bc68f.jpg",
        "table_caption": [
            "Table 4: Model size comparison. "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>Model</td><td>Number of parameters</td></tr><tr><td>TAPASBASE</td><td>110M</td></tr><tr><td rowspan=\"2\">TABLEFORMERBASE</td><td>110M - 2*512*768 +12*12*13=</td></tr><tr><td>110 M - 0.8 M + 0.002 M</td></tr><tr><td>TAPASLARGE</td><td>340M</td></tr><tr><td>TABLEFORMERLARGE</td><td>340M - 2*512*1024 +24*16*13= 340 M - 1.0 M + 0.005M</td></tr></table></body></html>",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "5.3 Model Size Comparison ",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "We compare the model sizes of TABLEFORMER and TAPAS in Table 4. We added only a few attention bias scalar parameters (13 parameters per head per layer) in TABLEFORMER, which is negligible compared with the BERT model size. Meanwhile, we delete two large embedding metrics (512 row ids and 512 column ids). Thus, TABLEFORMER outperforms TAPAS with fewer parameters. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "5.4 Analysis of TABLEFORMER Submodules",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "In this section, we experiment with several variants of TABLEFORMER to understand the effectiveness of its submodules. The performance of all variants of TAPAS and TABLEFORMER that we tried on the SQA development set is shown in Table 5. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Learnable Attention Biases v/s Masking. Instead of adding learnable bias scalars, we mask out some attention scores to restrict attention to those tokens in the same columns and rows, as well as the paired sentence, similar to Zhang et al. (2020) (SAT). We can see that TAPASBASE-SAT performs worse than TAPASBASE, which means that restricting attention to only same columns and rows by masking reduce the modeling capacity. This led to choosing soft bias addition over hard masking. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Attention Bias Scaling. Unlike TABLEFORMER, we also tried to add attention biases before the scaling operation in the self-attention module (SO). Specifically, we compute pair-wise attention score by: ",
        "page_idx": 6
    },
    {
        "type": "equation",
        "img_path": "images/5f610043ff59b1425de2892443aefab5d19a338ae75d865587270842981da33c.jpg",
        "text": "$$\nA _ { i j } = \\frac { ( h _ { i } ^ { \\top } W ^ { Q } ) ( h _ { j } ^ { \\top } W ^ { K } ) ^ { \\top } + \\hat { A } _ { i j } } { \\sqrt { d _ { K } } }\n$$",
        "text_format": "latex",
        "page_idx": 6
    },
    {
        "type": "table",
        "img_path": "images/dbd1fbd1c809e5963f6081b08ae5f050a82b62201fbd861300a812e8db7eb7fe.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td>rc-gp</td><td>c-gp</td><td>gp</td><td>pcp</td></tr><tr><td>TAPASBASE</td><td>57.6</td><td>47.4</td><td>46.4</td><td>29.1</td></tr><tr><td>TAPASBASE-SAT</td><td>45.2</td><td>-</td><td>-</td><td>-</td></tr><tr><td>TABLEFORMERBASE-SO</td><td>60.0</td><td>60.2</td><td>59.8</td><td>60.7</td></tr><tr><td>TABLEFORMERBASE</td><td>62.2</td><td>61.5</td><td>61.7</td><td>61.9</td></tr></table></body></html>",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Table 5: ALL questions’ cell selection accuracy of TABLEFORMER variants on SQA development set. rc$g p$ represents the setting including row ids, column ids and global positional ids, $c { \\scriptscriptstyle - } g p$ represents column ids and global positional ids, $g p$ represents global positional ids, and pcp represents per-cell positional ids. “SAT” represents masking out some attention scores. “SO” represents adding attention bias before scaling. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "instead of using: ",
        "page_idx": 6
    },
    {
        "type": "equation",
        "img_path": "images/982ad61fd86d3ba47e5b581364b08a8a52204edb4031a266f8b6b64467a91332.jpg",
        "text": "$$\nA _ { i j } = \\frac { ( { h _ { i } ^ { \\top } W ^ { Q } } ) ( { h _ { j } ^ { \\top } W ^ { K } } ) ^ { \\top } } { \\sqrt { d _ { K } } } + \\hat { A } _ { i j } ,\n$$",
        "text_format": "latex",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "which is the element-wise version of Equation 1 and 3. However, Table 5 shows that TABLEFORMERBASE-SO performs worse than TABLEFORMERBASE, showing the necessity of adding attention biases after the scaling operation. We think the reason is that the attention bias term does not require scaling, because attention bias scalar magnitude is independent of $d _ { K }$ , while the dot products grow large in magnitude for large values of $d _ { K }$ . Thus, such bias term could play an more important role without scaling, which helps each attention head know clearly what to pay more attention to according to stronger inductive biases. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Row, Column, & Global Positional IDs. With TAPASBASE, TABLEFORMERBASE-SO, and TABLEFORMERBASE, we first tried the full-version where row ids, column ids, and global positional ids exist as input $( r c { - } g p )$ . Then, we deleted row ids $( c { - } g p )$ , and column ids $( g p )$ sequentially. Finally, we changed global positional ids in $g p$ to per-cell positional ids $( p c p )$ . Table 5 shows that TAPASBASE performs significantly worse from rc$g p  c \\cdot g p  g p  p c p$ , because table structure information are deleted sequentially during such process. However, with TABLEFORMERBASE, there is no obvious performance drop during the same process. That shows the structural inductive biases in TABLEFORMER can provide complete table structure information. Thus, row ids, column ids and global positional ids are not necessary in TABLEFORMER. We pick TABLEFORMER pcp setting as our final version to conduct all other experiments in this paper. In this way, TABLEFORMER is strictly invariant to row and column order perturbation by avoiding spurious biases in those original ids. ",
        "page_idx": 6
    },
    {
        "type": "table",
        "img_path": "images/cc2f90efda1f598d032ff445310470a04d66224bb8a926435c0233854ef91dc2.jpg",
        "table_caption": [
            "Table 6: Comparison of TABLEFORMER and perturbed data augmentation on SQA test set, where $V P$ represents model prediction variation percentage after perturbation. Median of 5 independent runs are reported. "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td>Befor Perturb</td><td>After Perturb</td></tr><tr><td></td><td>ALL SEQ</td><td>ALL VP</td></tr><tr><td>TAPASBASE</td><td>61.1 31.3</td><td>57.4 14.0%</td></tr><tr><td>TAPASBAsE 1p</td><td>63.4 34.6 64.6</td><td>63.4 9.9%</td></tr><tr><td>TAPASBAsE 2p</td><td>35.6</td><td>64.5 8.4%</td></tr><tr><td>TAPASBAsE 4p</td><td>37.0</td><td>65.0 8.1%</td></tr><tr><td>TAPASBAsE 8p</td><td>37.3</td><td>64.3 7.2%</td></tr><tr><td>TAPASBAsE 16p</td><td>33.6</td><td>62.2 7.0%</td></tr><tr><td>TABLEFORMERBASE</td><td>39.7</td><td>66.7</td><td>0.1%</td></tr></table></body></html>",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "5.5 Comparison of TABLEFORMER and Perturbed Data Augmentation ",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "As stated in Section 4.3, perturbing row and column orders as augmented data during training can serve as another possible solution to alleviate the spurious row/column ids bias. Table 6 shows the performance of TABPASBASE model trained with additional $\\{ 1 , 2 , 4 , 8 , 1 6 \\}$ perturbed versions of each table as augmented data. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "We can see that the performance of TAPASBASE on SQA dataset improves with such augmentation. Also, as the number of perturbed versions of each table increases, model performance first increases and then decreases, reaching the best results with 8 perturbed versions. We suspect that too many versions of the same table confuse the model about different row and column ids for the same table, leading to decreased performance from 8p to 16p. Despite its usefulness, such data perturbation is still worse than TABLEFORMER, because it could not incorporate other relevant text-table structural inductive biases like TABLEFORMER. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "Although, such data augmentation makes the model more robust to row and column order perturbation with smaller $V P$ compared to standard TAPASBASE, there is still a significant prediction drift after perturbation. As shown in Table 6, $V P$ decreases from 1p to 16p, however, the best $V P$ $( 7 . 0 \\% )$ is still much higher than (nearly) no variation $( 0 . 1 \\% )$ of TABLEFORMER. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "To sum up, TABLEFORMER is superior to row and column order perturbation augmentation, because of its additional structural biases and strictly consistent predictions after perturbation. ",
        "page_idx": 7
    },
    {
        "type": "table",
        "img_path": "images/d858d353a2c9d64885dcb9c77988fd22e406d4c300026db1e40fa0512eb4fe8a.jpg",
        "table_caption": [
            "Table 7: Ablation study of proposed attention biases. "
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td>ALL</td><td>SEQ</td></tr><tr><td>TABLEFORMERBASE</td><td>62.1</td><td>38.4</td></tr><tr><td>- Same Row - Same Column</td><td>32.1 62.1</td><td>2.8 37.7</td></tr><tr><td>- Same Cell</td><td>61.8</td><td>38.4</td></tr><tr><td>- Cell to Column Header - Cell to Sentence</td><td>60.7</td><td>36.6 36.4</td></tr><tr><td>- Header to Column Cell</td><td>60.5</td><td>35.8</td></tr><tr><td>- Header to Other Header</td><td>60.5</td><td>35.8</td></tr><tr><td>- Header to Same Header</td><td>60.6</td><td></td></tr><tr><td></td><td>61.0</td><td>36.9</td></tr><tr><td>- Header to Sentence</td><td>61.1</td><td>36.3</td></tr><tr><td>- Sentence to Cell</td><td>60.8</td><td>36.2</td></tr><tr><td>- Sentence to Header</td><td>61.0</td><td>37.3</td></tr><tr><td>- Sentence to Sentence</td><td></td><td>35.3</td></tr><tr><td>- All Column Related (# 2, 4, 6)</td><td>60.0 54.5</td><td>29.3</td></tr></table></body></html>",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "5.6 Attention Bias Ablation Study ",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "We conduct ablation study to demonstrate the utility of all 12 types of defined attention biases. For each ablation, we set the corresponding attention bias type id to “others” bias id. Table 7 shows TAPASBASE’s performance SQA dev set. Overall, all types of attention biases help the TABLEFORMER performance to some extent, due to certain performance drop after deleting each bias type. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "Amongst all the attention biases, deleting “same row” bias leads to most significant performance drop, showing its crucial role for encoding table row structures. There is little performance drop after deleting “same column” bias, that’s because TABLEFORMER could still infer the same column information through “cell to its column header” and “header to its column cell” biases. After deleting all same column information (“same column”, “cell to column header” and “header to column cell” biases), TABLEFORMER performs significantly worse without encoding column structures. Similarly, there is little performance drop after deleting “same cell” bias, because TABLEFORMER can still infer same cell information through “same row” and “same column” biases. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "5.7 Limitations of TABLEFORMER ",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "TABLEFORMER increases the training time by around $2 0 \\%$ , which might not be ideal for very long tables and would require a scoped approach. Secondly, with the strict row and column order invariant property, TABLEFORMER cannot deal with questions based on absolute orders of rows in tables. This however is not a practical requirement based on the current dataset. Doing a manual study of 1800 questions in SQA dataset, we found that there are 4 questions5 $0 . 2 \\%$ percentage) whose answers depend on orders of rows. Three of them asked “which one is at the top of the table”, another asks “which one is listed first”. However, these questions could be potentially answered by adding back row and column order information based on TABLEFORMER. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "6 Other Related Work ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Transformers for Tabular Data. Yin et al. (2020) prepended corresponding column headers to cells contents, and Chen et al. (2020) used corresponding column headers as features for cells. However, such methods encode each table header multiple times, leading to duplicated computing overhead. Also, tabular structures (e.g. same row information) are not fully incorporated to such models. Meanwhile, Yin et al. (2020) leveraged row encoder and column encoder sequentially, which introduced much computational overhead, thus requiring retrieving some rows as a preprocessing step. Finally, SAT (Zhang et al., 2020), Deng et al. (2021) and Wang et al. (2021) restricted attention to same row or columns with attention mask, where such inductive bias is too strict that cells could not directly attend to those cells in different row and columns, hindering the modeling ability according to Table 5. Liu et al. (2021) used the seq2seq BART generation model with a standard Transformer encoder-decoder architecture. In all models mentioned above, spurious inter-cell order biases still exist due to global positional ids of Transformer, leading to the vulnerability to row or column order perturbations, while our TABLEFORMER could avoid such problem. Mueller et al. (2019) and Wang et al. (2020) also used relative positional encoding to encode table structures, but they modeled the relations as learnable relation vectors, whose large overhead prevented pretraining and led to poor performance without pretraining, similarly to ETC (Ainslie et al., 2020) explained in Section 3. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Structural and Relative Attention. Modified attention scores has been used to model relative positions (Shaw et al., 2018), long documents (Dai et al., 2019; Beltagy et al., 2020; Ainslie et al., 2020), and graphs (Ying et al., 2021). But adding learnable attention biases to model tabular structures has been under-explored. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "7 Conclusion ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "In this paper, we identified the vulnerability of prior table encoding models along two axes: (a) capturing the structural bias, and (b) robustness to row and column perturbations. To tackle this, we propose TABLEFORMER, where learnable task-independent learnable structural attention biases are introduced, while making it invariant to row/column order at the same time. Experimental results showed that TABLEFORMER outperforms strong baselines in 3 table reasoning tasks, achieving state-of-the-art performance on SQA dataset, especially when facing row and column order perturbations, because of its invariance to row and column orders. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Acknowledgments ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "We thank Julian Eisenschlos, Ankur Parikh, and the anonymous reviewers for their feedbacks in improving this paper. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Ethical Considerations ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "The authors foresee no ethical concerns with the research presented in this paper. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "References ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Joshua Ainslie, Santiago Ontanon, Chris Alberti, Vaclav Cvicek, Zachary Fisher, Philip Pham, Anirudh Ravula, Sumit Sanghai, Qifan Wang, and Li Yang. 2020. ETC: Encoding long and structured inputs in transformers. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 268–284, Online. Association for Computational Linguistics.   \nIz Beltagy, Matthew E. Peters, and Arman Cohan. 2020. Longformer: The long-document transformer. arXiv:2004.05150.   \nWenhu Chen, Hongmin Wang, Jianshu Chen, Yunkai Zhang, Hong Wang, Shiyang Li, Xiyou Zhou, and William Yang Wang. 2020. Tabfact : A large-scale dataset for table-based fact verification. In International Conference on Learning Representations (ICLR), Addis Ababa, Ethiopia.   \nZihang Dai, Zhilin Yang, Yiming Yang, Jaime Carbonell, Quoc Le, and Ruslan Salakhutdinov. 2019. Transformer-XL: Attentive language models beyond a fixed-length context. In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 2978–2988, Florence, Italy. Association for Computational Linguistics. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Xiang Deng, Huan Sun, Alyssa Lees, You Wu, and Cong Yu. 2021. TURL: Table Understanding through Representation Learning. In VLDB. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pages 4171–4186, Minneapolis, Minnesota. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Julian Eisenschlos, Maharshi Gor, Thomas Müller, and William Cohen. 2021. MATE: Multi-view attention for table transformer efficiency. In Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, pages 7606–7619, Online and Punta Cana, Dominican Republic. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Julian Eisenschlos, Syrine Krichene, and Thomas Müller. 2020. Understanding tables with intermediate pre-training. In Findings of the Association for Computational Linguistics: EMNLP 2020, pages 281–296, Online. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Jonathan Herzig, Pawel Krzysztof Nowak, Thomas Müller, Francesco Piccinno, and Julian Eisenschlos. 2020. TaPas: Weakly supervised table parsing via pre-training. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 4320–4333, Online. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Mohit Iyyer, Wen-tau Yih, and Ming-Wei Chang. 2017. Search-based neural structured learning for sequential question answering. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1821–1831, Vancouver, Canada. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Qian Liu, Bei Chen, Jiaqi Guo, Zeqi Lin, and Jianguang Lou. 2021. Tapex: Table pre-training via learning a neural sql executor. arXiv preprint arXiv:2107.07653. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Thomas Mueller, Francesco Piccinno, Peter Shaw, Massimo Nicosia, and Yasemin Altun. 2019. Answering conversational questions on structured data without logical forms. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 5902–5910, Hong Kong, China. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Panupong Pasupat and Percy Liang. 2015. Compositional semantic parsing on semi-structured tables. In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), pages ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "1470–1480, Beijing, China. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Peter Shaw, Jakob Uszkoreit, and Ashish Vaswani. 2018. Self-attention with relative position representations. In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 2 (Short Papers), pages 464–468, New Orleans, Louisiana. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in neural information processing systems, pages 5998–6008. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Bailin Wang, Richard Shin, Xiaodong Liu, Oleksandr Polozov, and Matthew Richardson. 2020. RAT-SQL: Relation-aware schema encoding and linking for text-to-SQL parsers. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 7567–7578, Online. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Zhiruo Wang, Haoyu Dong, Ran Jia, Jia Li, Zhiyi Fu, Shi Han, and Dongmei Zhang. 2021. TUTA: Tree-based Transformers for Generally Structured Table Pre-training. In Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery & Data Mining, pages 1780–1790. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Pengcheng Yin, Graham Neubig, Wen-tau Yih, and Sebastian Riedel. 2020. TaBERT: Pretraining for joint understanding of textual and tabular data. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 8413– 8426, Online. Association for Computational Linguistics. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Chengxuan Ying, Tianle Cai, Shengjie Luo, Shuxin Zheng, Guolin Ke, Di He, Yanming Shen, and TieYan Liu. 2021. Do Transformers Really Perform Bad for Graph Representation? arXiv preprint arXiv:2106.05234. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Tao Yu, Chien-Sheng Wu, Xi Victoria Lin, Bailin Wang, Yi Chern Tan, Xinyi Yang, Dragomir Radev, Richard Socher, and Caiming Xiong. 2020. GraPPa: Grammar-Augmented Pre-Training for Table Semantic Parsing. arXiv preprint arXiv:2009.13845. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Hongzhi Zhang, Yingyao Wang, Sirui Wang, Xuezhi Cao, Fuzheng Zhang, and Zhongyuan Wang. 2020. Table fact verification with structure-aware transformer. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1624–1629, Online. Association for Computational Linguistics. ",
        "page_idx": 9
    }
]